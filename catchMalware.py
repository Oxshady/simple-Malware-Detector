#!/usr/bin/python3
from pathlib import Path
from shutil import unpack_archive
from rarfile import RarFile
import hashlib
import requests
from binascii import crc32
from termcolor import colored
class MalwareDetection:
    def __init__(self) -> None:
        self.hash_objects = {
            'md5': hashlib.md5(),
            'sha1': hashlib.sha1(),
            'sha224': hashlib.sha224(),
            'sha256': hashlib.sha256(),
            'sha3384': hashlib.sha3_384(),
            'sha3512': hashlib.sha3_512()
        }
        self.all_files_hashes = dict()
        self.shutill_supp = [".zip", ".gz", ".tar", ".bz2", ".xz"]
        self.malicious_hashes = list()
        self.main_dir_path = None
        self.main_zipped = input(r"enter the path of malware:").strip(" ")
        self.hashes_db = input(r"enter the path of hashes database").strip(" ")
        self.main_dir = "./" + self.main_zipped[self.main_zipped.rfind("\\") + 1:self.main_zipped.rfind(".")]
    def get_mal_hashes(self):
        with open(self.hashes_db, 'r') as f:
            all_hashes = f.readlines()
            for hash in all_hashes:
                h = hash.lstrip('-').strip(' ')
                if h.find('(Mal)') > 0:
                    h = h.replace('(Mal)','').strip()
                    self.malicious_hashes.append(h)
    def extracting(self):
        unpack_archive(self.main_zipped,"./")
        self.main_dir_path = Path(self.main_dir)
        for file in self.main_dir_path.iterdir():
            if file.suffix in self.shutill_supp:
                unpack_archive(file, file.parent)
                file.unlink()
            elif file.suffix == ".rar":
                try:
                    with RarFile(file, 'r') as rar:
                        rar.extractall(file.parent)
                        file.unlink()
                except Exception as ex:
                    print(f"error in extracting rar files and err is: {ex}")
    def calc_hash(self):
        self.get_mal_hashes()
        for file in self.main_dir_path.iterdir():
            hash_crc = 0
            for hash in self.hash_objects.keys():
                with file.open(mode="rb") as f:
                    for line in f:
                        self.hash_objects[hash].update(line)
                self.all_files_hashes[self.hash_objects[hash].hexdigest()] = {"name":file.name, "location":file.resolve(),"Parent":file.parent, "hash algorithm":self.hash_objects[hash].name, "hash_of_file":self.hash_objects[hash].hexdigest()}
            with file.open(mode="rb") as f:
                for line in f:
                    hash_crc = crc32(line,hash_crc)
            hash_crc = hash_crc & 0xFFFFFFFF
            self.all_files_hashes[hash_crc] = {"name":file.name, "location":file.resolve(),"Parent":file.parent, "hash algorithm":'crc32', "hash_of_file":hash_crc}
    def print_files_data(self):
        for key, value in self.all_files_hashes.items():
            print(f"{key} {value}")
    def vt_scan(self,file_hash):
        apkey = "your api key"
        url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        header = {'x-apikey':apkey}
        res = requests.get(url=url, headers=header)
        if not res.status_code == 200:
            return
        data_of_res = res.json()
        if 'data' in data_of_res and 'attributes' in data_of_res['data']:
            attributes = data_of_res['data']['attributes']
            if 'last_analysis_stats' in attributes:
                return (attributes['last_analysis_stats']['malicious'])
        return None
    def check_files(self):
        for key in self.all_files_hashes.keys():
            flag = self.vt_scan(key)
            if flag:
                print(colored(f"flagged as malicious by {flag} scanner name:{self.all_files_hashes[key]['name']}",'red'))
            if key in self.malicious_hashes:
                print(colored(f"this file is malicious file name file data is {self.all_files_hashes[key]}",'red'))
if __name__ == "__main__":
    print("\033[91m" + r'''
               __         .__        __  .__                            .__                                
  ____ _____ _/  |_  ____ |  |__   _/  |_|  |__   ____     _____ _____  |  |__  _  _______ _______   ____  
_/ ___\\__  \\   __\/ ___\|  |  \  \   __\  |  \_/ __ \   /     \\__  \ |  |\ \/ \/ /\__  \\_  __ \_/ __ \ 
\  \___ / __ \|  | \  \___|   Y  \  |  | |   Y  \  ___/  |  Y Y  \/ __ \|  |_\     /  / __ \|  | \/\  ___/ 
 \___  >____  /__|  \___  >___|  /  |__| |___|  /\___  > |__|_|  (____  /____/\/\_/  (____  /__|    \___  >
     \/     \/          \/     \/             \/     \/        \/     \/                  \/            \/ 
              Author: shadi mahmoud
''' + "\033[0m")
malw = MalwareDetection()
malw.extracting()
malw.calc_hash()
malw.check_files()
